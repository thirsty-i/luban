{{~for bean in __beans~}}
#include "bean_{{to_snake_case bean.full_name}}.h"
{{~end~}}

{{namespace_with_grace_begin __namespace}}
{{~for bean in __beans~}}
{{namespace_with_grace_begin bean.namespace}}
{{~if bean.is_abstract_type~}}
bool {{bean.name}}::deserialize{{bean.name}}(::luban::ByteBuf& _buf, {{bean.name}}*& _out)
{
    int id;
    if (!_buf.readInt(id)) return false;
    switch (id)
    {
    {{~for child in bean.hierarchy_not_abstract_children~}}
        case {{make_type_cpp_name child}}::__ID__: { _out = new {{make_type_cpp_name child}}(); break; }
    {{~end~}}
        default: { return false;}
    }
    
    if (_out && _out->deserialize(_buf))
    {
        return true;
    }
    
    delete _out;
    _out = nullptr;
    return false;
}
{{~else~}}

bool {{bean.name}}::deserialize{{bean.name}}(::luban::ByteBuf& _buf, {{bean.name}}& _out)
{
    return _out.deserialize(_buf);
}
{{~end~}}
bool {{bean.name}}::deserialize(::luban::ByteBuf& _buf)
{
    {{~if bean.parent_def_type~}}
    if (!{{make_cpp_name bean.parent_def_type.full_name}}::deserialize(_buf))
    {
        return false;
    }
    {{~end

    for field in bean.export_fields ~}}
    {{deserialize '_buf' (format_field_name __code_style field.name) field.ctype}}
    {{~end~}}

    return true;
}

{{bean.name}}::~{{bean.name}}()
{
{{~for field in bean.export_fields
if field.is_nullable || is_abstract_type field.ctype~}}
    delete {{format_field_name __code_style field.name}};
{{~end
end~}}
}
{{namespace_with_grace_end bean.namespace}}

{{~end~}}


{{namespace_with_grace_end __namespace}}

