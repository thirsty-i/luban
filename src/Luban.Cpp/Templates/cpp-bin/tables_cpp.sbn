{{~for table in __tables~}}
#include "{{to_snake_case table.name}}.h"
{{~end~}}

{{namespace_with_grace_begin __namespace}}
{{x = 0}}
{{~for table in __tables~}}
const ::luban::int32 {{make_cpp_name table.full_name}}::__ID__ = {{x++}};
{{~end~}}

{{__name}}::{{__name}}()
{
    tables.reserve({{__tables_count}});
{{~for table in __tables~}}
    tables.emplace_back(new {{make_cpp_name table.full_name}}());
{{~end~}}
}

bool {{__name}}::load(::luban::Loader<::luban::ByteBuf> loader)
{
    ::luban::ByteBuf buf;
    
    for (auto& table : tables)
    {
        buf.clear();
        if (!loader(buf, table->getOutputDataFile())) return false;
        if (!table->load(buf)) return false;
    }

    return true;
}
{{namespace_with_grace_end __namespace}}
